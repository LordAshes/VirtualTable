</body>

<!-- Load style information for elements !-->
<LINK Rel="stylesheet" Href="/styles.css" />

<SCRIPT Language=Javascript>
  var game_id = <%= @game.id %>;
</SCRIPT>

<!-- Load jQuery support framework !-->
<SCRIPT Language=Javascript Src='/jquery-3.5.1.js'>
</SCRIPT>

<!-- Load javascript click related functionality !-->
<SCRIPT Language=Javascript Src='/ClientSideMenuActions.js'>
</SCRIPT>

<!-- Load javascript click related functionality !-->
<SCRIPT Language=Javascript Src='/Click.js'>
</SCRIPT>

<!-- Load javascript chat related functionality !-->
<SCRIPT Language=Javascript Src='/Chat.js'>
</SCRIPT>

<!-- Load javascript module related configuration !-->
<SCRIPT Language=Javascript Src='/<%= @game.module %>.module.js'>
</SCRIPT>

<SCRIPT Language=Javascript>

  // Variable for holding update timer so it can be disabled on navigation away from the page
  var updateTimer = null;
    
  // Used to initialize the play area when the page is loaded  
  function initializeUpdates()
  {	
	// Activate AJAX update requests using REST API call
    updateTimer = setInterval('$.ajax({ url: "/games/<%= @game.id %>/tokens?from="+from }).done(function(data){update(data);});',1000);
	
	// Apply settings otained from the included module js file
	document.getElementById("Table_0").style.width=settings["Width"]+"px";
	document.getElementById("Table_0").style.height=settings["Height"]+"px";
	document.getElementById("Table_0").style.backgroundColor=settings["Color"];
  }

  // Used to stop updates
  function destroyUpdates()
  {	
     clearInterval(updateTimer);
  }

  // Function for updating tokens based on updates from the server.
  // Updates can occur based on the interval update request or in response to a REST API request.
  // When user does token operations, the display is not updated directly. The operation is pushed to the server using an appropriate REST API request and the
  // REST API response (which contains the updated token data) is sent to this function to update the tokens with the new information.
  function update(data)
  {
    try
	{
	  // Parse out unused sections of the data (i.e. Ruby on Rails headers and footers)
	  data = data.substring(data.indexOf("|"));
	  data = data.substring(0,data.lastIndexOf("|"));
	  // Each line is a single token update. Process each token update. Most REST API requests will result in only one token change but there are some REST API
	  // requests which result in multiple token changes (e.g. reorder) and the periodic update REST API can come back with multiple token changes depending on
	  // how many tokens were changed since the last update.
	  tokens = data.split('\n');
	  tokens.forEach(function(token)
	  {
  	    if(token!="")
	    {
		  // Parse out the pipe separated data ([1]=id,[2]=element,[3]=x,[4]=y,[5]=z,[6]=rotation,[7]=state,[8]=states,[9]=location,[10]=locked,[11]=UpdatedDateTime) and apply it to the token
	      var parts = token.split('|');
		  tk = document.getElementById(parts[2]+"_"+parts[1]);
		  // Update position
		  tk.style.left = parts[3]+"px";
		  tk.style.top = parts[4]+"px";
		  tk.style.zIndex = parts[5];
		  // Update rotation
		  tk.style.transform = "rotate("+parts[6]+"deg)";
		  // Update class name to reflect location and locked status
	      tk.className = parts[9]+" "+parts[10];
		  // Update the token image to state if on the Table or in own hand, and to first state if in other's hand
		  if(parts[9]==document.getElementById('player').value || parts[9]=="Table")  {  tk.src = "/"+parts[7]+".png"; } else { tk.src = "/"+parts[8].split(',')[0]+".png"; }
		  // Update card shadow to reflect player color (if in hand), black (if in other's hand) or none if on Table
		  if(parts[9]=="Table")
		  {
  			tk.style.filter="";
		  }
		  else if(parts[9]==document.getElementById('player').value)
		  {
  			tk.style.filter="drop-shadow(8px 8px 10px "+document.getElementById('playerColor').value+")";
		  }
		  else
		  {
  			tk.style.filter="drop-shadow(8px 8px 10px black)";
		  }
		  // Store last update DateTime to be passed in on the next update so that only new updates are obtained
		  from = parts[11];
	    }
	  });	
	}
	catch(e)
	{
	  alert(e);
	}
  }
     
</SCRIPT>

<!-- Initialize the page on load !-->
<BODY onLoad="initializeUpdates(); initializeClicks(); initializeChat();">

<!-- Display small header infromation leaving majority of the screen for the play area !-->
<span Id=GameTitle><%= @game.title %></span>
<span Id=GameModule>(<%= @game.module %>) &nbsp;&nbsp;&nbsp;</span>
<span Class=GameBarMenuItem><input type=color id="playerColor" value="#00AA00"></span>
<span Class=GameBarMenuItem><input type=text id="player" value="Bob" size=10></span>
<span Class=GameBarMenuItem><button onClick="destroyUpdates(); destroyChat(); document.location.href='/games/';">Main Menu</button></span>
<button onClick="from='2020-01-01 12:00:00 UTC';">Refresh</button>
<span Id=check Class=GameBarMenuItem></span>

<!-- Create a table object that will hold the tokens and act as a object to click on for token movements !-->
<DIV Id='Table_0' class='Table Locked' onClick='clickHandler("0","Table");' onMouseMove='dragUpdate();' style="Position: Absolute; Left: 10px; Top: 40px; z-Index: 1;">
<!-- Create session tokens !-->
<% @game.tokens.each do |token| %>
  <% unless(token.id.to_s.empty?) %>
    <IMG Id='<%= token.title %>_<%= token.id %>' Class='<%= token.location %> <%= token.locked %>' Src='/<%= token.state %>.png' title='<%= token.location %>' style='Position: Absolute; Left:<%= token.x %>px; Top:<%= token.y %>px; z-index:<%= token.z %>; transform: rotate(<%= token.rotation %>deg)' onClick='clickHandler("<%= token.id %>","<%= token.title %>");' onMouseMove='dragUpdate();' />
  <% end %>
<% end %>
</DIV>